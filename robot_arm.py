# !/usr/bin/python
# -* - coding: UTF-8 -* -

import time
import datetime
import math
import json
#import smbus
import socket
import numpy as np
import pdb
import numpy as np
import cv2
import random
d0 = 15
d1 = 14
d2 = 0
d3 = 8
d4 = 4
d5 = 10


duoji={"0":{"dj":d0, "act": 1},
       "1":{"dj":d1, "act": 1},
       "2":{"dj":d2, "act": 1},
       "3":{"dj":d3, "act": 1},
       "4":{"dj":d4, "act": 1},
       "5":{"dj":d5, "act": 1}}




r_list = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]
a_list = [-86,-84,-81,-78,-75,-72,-69,-65,-62,-61,-56,-57,-54,-54,-52,-50,-48,-45,-43,-41,-40,-30,-33,-30,-28,-23,-17,-5]
z_list = [-1.47,-1.57,-1.3,-1.15,-1.24,-1.47,-1.65,-1.03,-1.45,-1.69,-1.34,-1.3,-1.28,-1.46,-1.51,-1.34,-1.52,-1.33,-1.34,-1.57,-1.32,-1.07,-1.54,-1.54,-1.4,-1.22,-1.4,-1.3]

x = 0
y = 0
w = 0
z = 0
r = 0
r1 = 0
ag = 0
ag1 = 0
ct1 = 0
ct2 = 0
ct21 = 0
ct3 = 0
fai = 0
seita = 0
fai1 = 0
seita1 = 0
l = 0
class PCA9685:
    __SUBADR1 = 0x02
    __SUBADR2 = 0x03
    __SUBADR3 = 0x04
    __MODE1   = 0x00
    __PRESCALE  = 0xFE
    __LED0_ON_L = 0x06
    __LED0_ON_H = 0x07
    __LED0_OFF_L = 0x08
    __LED0_OFF_H = 0x09
    __ALLLED_ON_L = 0xFA
    __ALLLED_ON_H = 0xFB
    __ALLLED_OFF_L = 0xFC
    __ALLLED_OFF_H = 0xFD




    def __init__(self,address = 0x40,debug = False):
        self.bus = smbus.SMBus(1)
        self.address = address
        self.debug = debug
        if (self.debug):
             print("Reseting PCA9685")
        self.write(self.__MODE1, 0x00)

    def write(self,reg,value):
        "Writes an 8-bit value to the specified register/address"
        self.bus.write_byte_data(self.address,reg,value)
        if (self.debug):
            print("I2C:write 0x%02X to register 0x%02X " % (value, reg))

    def read(self,reg):
        "Read an unsigned byte from the I2C device"
        result = self.bus.read_byte_data(self.address,reg)
        if (self.debug):
            print("I2C: Device 0x%02X returned 0x%02X from reg 0x%02X" % (self.address,result & 0xFF,reg))
        return result

    def setPWMFreq(self,freq):
        "Sets the PWM frequency"
        prescaleval = 25000000.0
        prescaleval /= 4096.0
        prescaleval /= float(freq)
        prescaleval -= 1.0
        if (self.debug):
            print("Setting PWM frequency to %d Hz" % freq)
            print("Estimated pre-scale: %d" % prescaleval)
        prescale = math.floor(prescaleval + 0.5)
        if (self.debug):
            print("final pre-scale: %d" %prescale)

        oldmode = self.read(self.__MODE1);
        newmode = (oldmode & 0x7f)| 0x10
        self.write(self.__MODE1,newmode)
        self.write(self.__PRESCALE,int(math.floor(prescale)))
        self.write(self.__MODE1,oldmode)
        time.sleep(0.005)
        self.write(self.__MODE1, oldmode | 0x80)

    def setPWM(self,channel,on,off):
        "Sets a single PWM channel"
        self.write(self.__LED0_ON_L+4*channel,on & 0xFF)
        self.write(self.__LED0_ON_H+4*channel,on >> 8)
        self.write(self.__LED0_OFF_L+4*channel,off & 0xFF)
        self.write(self.__LED0_OFF_H+4*channel,off >> 8)
        if (self.debug):
            print("channel: %d LED_ON :%d LED_OFF: %d" % (channel,on,off))
    def setServoPulse(self,channel,pulse):
        "Sets the Servo Pulse,The PWM frequency must be 50HZ"
        pulse = pulse*4096/20000
        self.setPWM(channel, 0,int(pulse))

default_d2x = 1330
default_d6x = 930
default_d4x = 652
default_d1x = 1310
default_d3x = 1355


d2x = default_d2x
d6x = default_d6x
d4x = default_d4x
d1x = default_d1x
d3x = default_d3x

def PMW_action(pwm, idx, value, value2):

    idx = str(idx)

    value2 *= duoji[idx]['act']
    step = 1
    if value2 < 0:
        step  = -1

    value2 += value

    for x in range(value, value2, step):
        pwm.setServoPulse(duoji[idx]['dj'], x)
        time.sleep(0.01)


    time.sleep(0.4)

    # duoji[idx] = x
    return x



# if __name__=="__main__":
def way_first():
    pwm = PCA9685(0x40, debug = False)
    pwm.setPWMFreq(50)
    dx = [1310, 1275, 1887, 1835, 1647, 6]
    dx[3] = PMW_action(pwm, 3, 1845, 10)
    dx[2] = PMW_action(pwm, 2, 1897, 10)
    dx[1] = PMW_action(pwm, 1, 1285, 10)
    dx[0] = PMW_action(pwm, 0, 1320, 10)
    #while True:

# 臂长数组
#brachium = [10.5, 9.9, 16.72]

# 坐标转化到各个舵机的角度
def coordinate_t1o_angles(x_value, y_value, brachium):
    # part1 计算舵机水平面的半径r1,三维半径r，极轴与z轴的夹角fai，极轴与xoz平面的夹角seita，角度为弧度制
    radius_level_value1 = x_value * x_value + y_value * y_value # r1
    radius_level_value1 = math.sqrt(radius_level_value1)
    radius_level_value1 = round(radius_level_value1)

    pw = r_list.index(radius_level_value1)
    z_value = z_list[pw]

    r_polar_axis = x_value * x_value + y_value * y_value + z_value * z_value
    r_polar_axis = math.sqrt(r_polar_axis) # 极轴的值

    print(" r value is:")
    print(r_polar_axis)
    angle_fai = math.acos(z_value / r_polar_axis)
    angle0_value = math.asin(y_value / (r_polar_axis * math.sin(angle_fai)))
    print('angle_fai radian value was:' + str(angle_fai), 'angle0 radian value was:' + str(angle0_value))
    fai1 = angle_fai
    seita1 = angle0_value
    fai1 = (fai1 / math.pi) * 180
    if x_value >= 0:
        seita1 = (seita1 / math.pi) * 180
    else:
        seita1 = 180 - (seita1 / math.pi) * 180
    print('fai_angle was:'+  str(fai1))
    print('angle0_value was:' +  str(seita1))

    # part2 根据xyz坐标在一直数组里提取终端姿态角ag，弧度转化为角度
    extreme_ag_value = a_list[pw] # ag
    print(x_value, y_value, z_value, extreme_ag_value, radius_level_value1)
    ag1 = extreme_ag_value
    extreme_ag_value = extreme_ag_value * 3.1415926 / 180
    # part3 通过机器人逆运动学，得出2、3、4号舵机应该旋转的角度值，此值为实际值，分别是ct1、ct2、ct3
    angle2_value = radius_level_value1 * radius_level_value1 + z_value * z_value - 2 * radius_level_value1 * brachium[2] * math.cos(extreme_ag_value) - 2 * z_value * brachium[2] * math.sin(extreme_ag_value) + (brachium[2] * math.cos(extreme_ag_value)) * (
            brachium[2] * math.cos(extreme_ag_value)) + (brachium[2] * math.sin(extreme_ag_value)) * (brachium[2] * math.sin(extreme_ag_value)) - brachium[0] * brachium[0] - brachium[1] * brachium[1]
    angle2_value = angle2_value / (2 * brachium[0] * brachium[1])
    print("jiao2 angle value:")
    print(angle2_value)
    angle2_value = -math.acos(angle2_value)
    print(angle2_value)
    # l = input("%d\n" % l)
    ct21 = angle2_value
    angle2_value = angle2_value * 180 / 3.1415926
    print("ct2:")
    print(angle2_value)

    angle1_value = (z_value - brachium[2] * math.sin(extreme_ag_value)) * (brachium[0] + brachium[1] * math.cos(ct21)) - brachium[1] * math.sin(ct21) * (
            radius_level_value1 - brachium[2] * math.cos(extreme_ag_value))
    angle1_value = angle1_value / ((z_value - brachium[2] * math.sin(extreme_ag_value)) * (brachium[1] * math.sin(ct21)) + (radius_level_value1 - brachium[2] * math.cos(extreme_ag_value)) * (
            brachium[0] + brachium[1] * math.cos(ct21)))
    angle1_value = math.atan(angle1_value)
    angle1_value = angle1_value * 180 / 3.1415926
    print("ct1:")
    print(angle1_value)

    angle3_value = ag1 - angle1_value - angle2_value
    print("ct3:")
    print(angle3_value)
    return(seita1, angle1_value, angle2_value, angle3_value, radius_level_value1, r_polar_axis, z_value)

# 一号舵机的真值angle1
def angle1_truth_value(angle1_value):
     para_value = 7.27
     angle1_value = float(angle1_value)
     if angle1_value > 0:
          if angle1_value < 60:
               para_value = 7.45
          elif angle1_value >= 218:
               para_value = 7.27
          elif angle1_value > 80:
               para_value = 7.57
          angle1_value = int(angle1_value * para_value + 604)
     elif angle1_value < 0:
          if angle1_value > -21:
               angle1_value = 21 + angle1_value
               para_value = 7.58
          else:
               angle1_value = 0
               para_value = 7.58
          angle1_value = int(angle1_value * para_value + 450)
     print('ct1 truth value was:')
     print(angle1_value)
     return (angle1_value)

# 二号舵机的真值angle2
def angle2_truth_value(angle2_value):
     angle2_value = float(angle2_value)
     para_value = 7.27
     if angle2_value > 0:
          if angle2_value < 72:
                angle2_value = 124 - angle2_value
          elif angle2_value < 124:
                angle2_value = angle2_value
          else:
                angle2_value = 0
          angle2_value = int(angle2_value * para_value + 450)
     elif angle2_value < 0:
          if angle2_value > -40:
               angle2_value = 124 - angle2_value
               para_value = 7.11
          elif angle2_value > -80:
               angle2_value = 124 - angle2_value
               para_value = 7.21
          elif angle2_value > -124:
               angle2_value = 124 - angle2_value
               para_value = 7.51
          else:
               angle2_value = 248
               para_value = 7.51
          angle2_value = int(angle2_value * para_value + 435)
     print('ct2 truth value was:')
     print(angle2_value)
     return(angle2_value)

# 三号舵机的真值angle3
def angle3_truth_value(angle3_value):
     angle3_value = float(angle3_value)
     para_value = 7.53
     if angle3_value > 0:
          if angle3_value < 126:
               angle3_value = 125 - angle3_value
          else:
               angle3_value = 0
          angle3_value = int(angle3_value * para_value + 450)

     if angle3_value < 0:
          if angle3_value > -26:
               angle3_value = 125 - angle3_value
               para_value = 7.33  # 7.13
          elif angle3_value > -35:
               angle3_value = 125 - angle3_value
               para_value = 7.23  # 7.13
          elif angle3_value > -67:
               angle3_value = 125 - angle3_value
               para_value = 7.43  # 7.23
          elif angle3_value > -70:
               angle3_value = 125 - angle3_value
               para_value = 7.54  # 7.23
          elif angle3_value > -90:
               angle3_value = 125 - angle3_value
               para_value = 7.53  # 7.23
          elif angle3_value > -115:
               angle3_value = 125 - angle3_value
               para_value = 7.54  # 7.53
          else:
               angle3_value = 240
               para_value = 7.6  # 7.53
          angle3_value = int(angle3_value * para_value + 450)
     print('ct3 truth value was:')
     print(angle3_value)
     return(angle3_value)

# 0号舵机的真值 seita1
def angle0_truth_value(key_value,r1_value):#seita角度，机械臂平面半径r1

     b = ((8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#0,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#1
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#2,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#3
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#4,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#5,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#6,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#7,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#8,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#9,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#10,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#11,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#12,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#13,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#14,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#15,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#16,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#17,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#18,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#19,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#20,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#21,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#22,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#23,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#24,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#25,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#26,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01),#27,
          28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,
          (7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61),#56,
          (7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25),#57,
          (7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25),#58,
          (7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25,7.25),#59,
          (7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11,7.11),#60,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#61,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.14,7.14,7.24,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#62,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.14,7.14,7.24,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#63,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.14,7.14,7.24,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#64,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#65,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21),#66,
          (7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.08,7.3,7.3,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2),#67,
          (7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.08,7.3,7.3,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2),#68,
          (7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.35,7.26,7.31,7.32,7.31,7.31,7.31,7.31,7.35,7.31,7.31,7.31),#69,
          (7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.35,7.26,7.31,7.12,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31),#70,
          (7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.11,7.31,7.01,7.31,7.11,7.11,7.22,7.31,7.31,7.31,7.31,7.42,7.31,7.31),#71,
          (7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.31,7.11,7.31,7.01,7.31,7.11,7.11,7.22,7.31,7.31,7.31,7.31,7.42,7.31,7.31),#72,
          (7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.09,7.19,7.09,7.19,7.39,7.19,7.19,7.19,7.19,7.19),#73,
          (7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.19,7.09,7.19,7.09,7.19,7.39,7.19,7.19,7.19,7.19,7.19),#74,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,6.81,7.01,7.21,7.01,7.21,7.35,7.35,7.21,7.21,7.55,7.65,7.49),#75,
          (7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,7.21,6.81,7.01,7.21,7.01,7.21,7.35,7.35,7.21,7.21,7.55,7.65,7.49),#76,
          (7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.21,7.41,7.41,7.41,7.41,7.41,7.41,7.41,7.81),#77,
          (7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.81,7.79,7.60,7.70,7.70,7.50,7.50,7.50,7.70,7.60,7.91,7.70,7.85,7.91,7.85,7.91),#78,
          (7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.81,7.79,7.60,7.70,7.70,7.50,7.50,7.50,7.70,7.65,7.60,7.80,7.95,7.91,7.91,7.91,7.91),#79,
          (7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.91,7.81,7.79,7.60,7.70,7.70,7.50,7.50,7.50,7.70,7.65,7.60,7.80,7.95,7.91,7.91,7.91,7.91),#80,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,7.70,7.60,7.30,7.50,8.01,7.60,8.01,8.11,8.01,8.01,8.01,8.21,8.01,8.01,8.01),#81,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,7.70,7.60,7.30,7.50,8.01,7.60,8.01,8.11,8.01,8.01,8.01,8.21,8.01,8.01,8.01),#82,
          (8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,8.01,7.70,7.60,7.30,7.50,8.01,7.60,8.01,8.11,8.01,8.01,8.01,8.21,8.01,8.01,8.01),#83,
          (7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.55,7.95,7.61,7.61,7.91,7.81,7.81,7.71,7.91,7.81,7.91,8.91,7.81,7.81,7.81),#84,
          (7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.55,7.95,7.61,7.61,7.91,7.81,7.81,7.71,7.91,7.81,7.91,8.91,7.81,7.81,7.81),#85,
          (7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.71,7.51,7.71,7.71,8.09,7.71,7.71,7.71,7.71,7.71),#86,
          (7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.51,6.81,6.81,6.91,6.91,7.61,8.10,7.40,7.80,8.10,8.50,8.99,7.61,7.61),#87,
          (7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.51,6.81,6.81,6.91,6.91,7.61,8.10,7.40,7.80,8.10,8.50,8.99,7.61,7.61),#88,
          (7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.51,6.81,6.81,6.91,6.91,7.61,8.10,7.40,7.80,8.10,8.50,8.99,7.61,7.61),#89,
          (7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.61,7.51,6.81,6.81,6.91,6.91,7.61,8.10,7.40,7.80,8.10,8.50,8.99,7.61,7.61),#90,
          (5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.08,5.28,4.88,5.08,5.58),#91,
          (5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.58,5.08,5.28,4.88,5.08,5.58),#92,
          (7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,6.88,7.48,7.48,7.28,7.18,7.48,7.48,7.48),#93,
          (7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,7.48,6.88,7.48,7.48,7.28,7.18,7.48,7.48,7.48),#94,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,6.98,7.08,7.38,7.9,7.5,7.4,7.69,7.69,7.69,7.69,7.69),#95,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,6.98,7.08,7.38,7.9,7.5,7.4,7.69,7.69,7.69,7.69,7.69),#96,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,6.98,7.08,7.38,7.9,7.5,7.1,7.69,7.69,7.69,7.69),#97,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,6.85,7.5,7.65,7.65,7.65,7.35,7.69,7.69,7.69,7.69),#98,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,6.85,7.5,7.65,7.65,7.65,7.35,7.69,7.69,7.69,7.69),#99,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.7,7.6,7.8,7.8,7.8,7.9,7.9,7.9,7.9,7.9,7.9),#100,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.7,7.6,7.8,7.8,7.8,7.9,7.45,7.9,7.9,7.9,7.9),#101,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.8,7.8,7.8,7.8,7.61,7.9,7.9,7.9,7.9),#102,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.8,7.8,7.8,7.7,7.75,7.7,7.9,7.9,7.9),#103,
          (7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.69,7.85,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.8,7.8,7.8,7.7,7.75,7.7,7.9,7.9,7.9),#104,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.7,7.7,7.6,7.7,7.7,7.7,7.6,7.7),#105,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.7,7.7,7.6,7.7,7.7,7.7,7.6,7.7),#106,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.6,7.7,7.7,7.7,7.6,7.7),#107,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.54,7.65,7.65,7.65,7.75,7.6),#108,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.54,7.65,7.65,7.65,7.75,7.6),#109,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.54,7.65,7.65,7.65,7.75,7.6),#110,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.70,7.70,7.70,7.70,7.70),#111,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.70,7.70,7.70,7.70,7.70),#112,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.70,7.70,7.70,7.70,7.70),#113,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.65,7.65,7.65,7.65,7.65,7.70,7.78,7.70,7.70,7.70,7.70,7.70,7.70,7.70),#114,
          (7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.74,7.76,7.76,7.81,7.81,7.81,7.81,7.81,7.81,7.81,7.70,7.70,7.70,7.70,7.70,7.70,7.70),#115,
          (7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90),#116,
          (7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90),#117,
          (7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90),#118,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#119,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#120,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#121,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#122,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#123,
          (7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57,7.57),#124,
          (7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60),#125,
          (7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60),#126,
          (7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60),#127,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#128,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#129,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#130,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#131,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#132,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#133,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#134,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#135,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#136,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#137,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#138,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#139,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#140,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#141,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#142,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#143,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#144,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#145,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#146,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#147,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#148,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#149,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#150,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#151,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#152,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#153,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#154,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#155,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#156,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#157,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#158,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#159,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#160,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#161,
          (7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22,7.22),#162,
          )
     print('angle0 value was:'+ str(key_value))
     key_value_compare = int(key_value + 1)
     for i in range(len(b)):
         if key_value_compare == float(i):
             print(i)
             print('angle0 array value was:' + str(b[i]))
             for j in range(len(b[i])):
                 if r1_value == float(j):
                     print('angle0 para was:'+ str(b[i][j]))
                     if key_value >= 90:
                          key_value = key_value - 90
                          angle0_truth_Vvalue = int(1285 + key_value * b[i][j])
                     elif key_value < 90:
                          key_value = 90 - key_value
                          angle0_truth_Vvalue = int(1285 - key_value * b[i][j])
     print('angle0_truth_value_was:')
     print(angle0_truth_Vvalue)
     return (angle0_truth_Vvalue)

# 2、3、4号舵机的参数补偿
def parameter_compensation(z_value,radius_level_value):
    # 1舵机舵机拟合
    if radius_level_value < 21:
        angle1_para = -0.5536 * math.pow(radius_level_value,2) + 18.625 * radius_level_value - 30.8929
    elif radius_level_value <= 27:
        angle1_para = 0.5 * math.pow(radius_level_value,2) - 30.5 * radius_level_value + 518
    else :
        angle1_para = 3 * math.pow(radius_level_value, 2) - 176 * radius_level_value + 2649
    # 3号舵机你和
    if radius_level_value <= 24:
        angle3_para = 0.2292 * math.pow(radius_level_value,2) - 18.2917 * radius_level_value + 365
    else:
        angle3_para = 0.5 * math.pow(radius_level_value, 2) - 22.5 * radius_level_value + 295
    # 2号舵机拟合
    if radius_level_value <= 12:
        angle2_para = -11 * math.pow(radius_level_value, 2) + 218 * radius_level_value - 912
    elif radius_level_value <= 15:
        angle2_para = -10 * math.pow(radius_level_value, 2) + 260 * radius_level_value - 1570
    elif radius_level_value <= 18:
        angle2_para = -2.5 * math.pow(radius_level_value, 2) + 72.5 * radius_level_value - 450
    elif radius_level_value <= 21:
        angle2_para = 5.5 * math.pow(radius_level_value, 2) - 229.5 * radius_level_value + 2410
    elif radius_level_value <= 24:
        angle2_para = -2.5 * math.pow(radius_level_value, 2) + 107.5 * radius_level_value - 1135
    elif radius_level_value <= 27:
        angle2_para = 7.5 * math.pow(radius_level_value, 2) - 382.5 * radius_level_value + 4875
    else:
        angle2_para = 0


    print('angle1_para was' + str(angle1_para),'angle2_para was' + str(angle2_para),'angle3_para was' + str(angle3_para))
    return(0,-int(round(angle1_para)),int(round(angle2_para)),-int(round(angle3_para))) # 舵机0不在补偿范围内，0只是来占位的

# 数据处理，生成各个舵机相应的角度
def data_dispo3se(point_x, point_y):
    gather_value = coordinate_to_angles(point_x, point_y, brachium)
    print(gather_value)
    radius_level_value1 = gather_value[4]
    angle_true_value = [
        int(angle0_truth_value(gather_value[0], radius_level_value1)),
        int(angle1_truth_value(gather_value[1])),
        int(angle2_truth_value(gather_value[2])),
        int(angle3_truth_value(gather_value[3])),
        1400,
        960
    ]
    print(angle_true_value)
    return(angle_true_value)
# 求水平半径和Z
def radius_and_z_value(point_x,point_y):
    gather_value = coordinate_to_angles(point_x, point_y, brachium)
    print('every steering engine  degree on next line:')
    print(gather_value)
    radius_level_value1 = gather_value[4]
    z_value = gather_value[6]
    return(radius_level_value1,z_value)

# 动作函数
def act_function(act_function_calculate_list):
    pwm = PCA9685(0x40, debug=False)
    pwm.setPWMFreq(50)
    for act in act_function_calculate_list:
        PMW_action(pwm, act['duoji'], act['aim_value'], 10)
        if act.get('time_sleep') != None:
            time.sleep(act['time_sleep'])

#  动作功能计算函数
def act_function_calculate(data_dipose_list,radius_level_value1,z_value):

    # 参数补偿
    compensation_array = parameter_compensation(z_value, radius_level_value1)
    print(compensation_array)
    # 对arm__list进行装载

    # part4 相应动作开始响应，到达大致位置，位于目标位置正上方
    arm_action1 = [{'duoji': 5}, {'duoji': 3}, {'duoji': 2}, {'duoji': 1},  {'duoji': 0, 'time_sleep': 1}]# remember delete the last one
    i = 0
    for act in arm_action1:
        i = i + 1
        if i == 6:
            act['aim_value'] = 1400
        else:
            act['aim_value'] = data_dipose_list[act['duoji']]

        # i= i + 1
        # elif (i <= 5)&(i > 1):
        #     act['aim_value'] = int(((data_dipose_list[act['duoji']]) + glob_list_angle[act['duoji']]) / 2)
        # else:
        #     act['aim_value'] = data_dipose_list[act['duoji']]
            # glob_list_angle[act['duoji']] = data_dipose_list[act['duoji']]

    print(arm_action1)

    # part5 通过对舵机2、3、4的位置补偿，以下可以到达精确位置
    arm_action2 = [{'duoji': 2}, {'duoji': 3}, {'duoji': 1}, {'duoji': 5, 'time_sleep': 1}]
    for act in arm_action2:
        if act['duoji'] == 5:
            act['aim_value'] = 1400
        else:
            act['aim_value'] = compensation_array[act['duoji']] + data_dipose_list[act['duoji']]

    print(arm_action2)

    # part6 提起机械臂，将抓取的物体下放
    arm_action3 = [{'duoji': 1, 'time_sleep': 1, 'aim_value': data_dipose_list[1] + 150}, {'duoji': 0, 'time_sleep': 0.3, 'aim_value': 1000},
                   {'duoji': 2, 'time_sleep': 0.2, 'aim_value': 1900}, {'duoji': 3, 'time_sleep': 0.2, 'aim_value': 1800},
                   {'duoji': 1, 'aim_value': 1200},{'duoji': 5, 'aim_value': 960}]
    print(arm_action3)
    arm_action = arm_action1 + arm_action2 + arm_action3
    print('arm_action array was: ')
    print(arm_action)
    return(arm_action)

# glob_list_angle = [1297,1286,1355,1391,1400,960]
def second_way(point_x, point_y):
    pwm = PCA9685(0x40, debug = False)
    pwm.setPWMFreq(50)
    global glob_list_angle
    point_x = float(point_x)
    point_y = float(point_y)
    print(point_x)
    print(point_y)
    #得到舵机0-5的目标量
    data_dipose_list = data_dispose(point_x, point_y)

    print(data_dipose_list)
    #得出水平方向的r值和z值
    radius_and_z_value_list = radius_and_z_value(point_x, point_y)
    radius_level_value1 = radius_and_z_value_list[0]
    z_value = radius_and_z_value_list[1]
    # 数据处理
    act_function_calculate_list = act_function_calculate(data_dipose_list, radius_level_value1, z_value)
    # 动作
    print(datetime.datetime.now())
    act_function(act_function_calculate_list)
    print(datetime.datetime.now())
    # return(data_dipose_list)




brachium = [10.5, 9.9, 16.72]
def coordinate_to_angles(x_value, y_value, point_z, extreme_ag_value,  brachium):
    # part1 计算舵机水平面的半径r1,三维半径r，极轴与z轴的夹角fai，极轴与xoz平面的夹角seita，角度为弧度制
    radius_level_value1 = x_value * x_value + y_value * y_value # r1
    radius_level_value1 = math.sqrt(radius_level_value1)
    radius_level_value1 = round(radius_level_value1)
    # 自加函数
    def add_self(extreme_ag_value):
        extreme_ag_value = extreme_ag_value + 1
        return (extreme_ag_value)

        # 自减函数
    def sub_self(extreme_ag_value):
        extreme_ag_value = extreme_ag_value - 1
        return (extreme_ag_value)
    # pw = r_list.index(radius_level_value1)
    i = 0
    z_value = point_z

    r_polar_axis = x_value * x_value + y_value * y_value + z_value * z_value
    r_polar_axis = math.sqrt(r_polar_axis) # 极轴的值

    print(" r value is:")
    print(r_polar_axis)
    angle_fai = math.acos(z_value / r_polar_axis)
    by_value = (y_value / (r_polar_axis * math.sin(angle_fai)))
    if by_value > 1:
        print('value out put')
        by_value = 1
    else:
        print('normal value')
    print('level value was:' + str(by_value))
    angle0_value = math.asin(by_value)
    print('angle_fai radian value was:' + str(angle_fai), 'angle0 radian value was:' + str(angle0_value))
    fai1 = angle_fai
    seita1 = angle0_value

    fai1 = (fai1 / math.pi) * 180
    if x_value >= 0:
        seita1 = (seita1 / math.pi) * 180
    else:
        seita1 = 180 - (seita1 / math.pi) * 180
    print('fai_angle was:' + str(fai1))
    print('angle0_value was:' + str(seita1))

    print(x_value, y_value, z_value, extreme_ag_value, radius_level_value1)
    # ag1 = extreme_ag_value
    # extreme_ag_value = extreme_ag_value * 3.1415926 / 180
    # part2 根据xyz坐标在一直数组里提取终端姿态角ag，弧度转化为角度
    while True:
        # extreme_ag_value = add_self(extreme_ag_value)
        print('init_angle_value was:' + str(extreme_ag_value))
        ag1 = extreme_ag_value
        extreme_ag_value_r = extreme_ag_value * 3.1415926 / 180
        # part3 通过机器人逆运动学，得出2、3、4号舵机应该旋转的角度值，此值为实际值，分别是ct1、ct2、ct3
        angle2_value = radius_level_value1 * radius_level_value1 + z_value * z_value - 2 * radius_level_value1 * brachium[
            2] * math.cos(extreme_ag_value_r) + -2 * z_value * brachium[2] * math.sin(extreme_ag_value_r) + (
                                   brachium[2] * math.cos(extreme_ag_value_r)) * (
                               brachium[2] * math.cos(extreme_ag_value_r)) + (brachium[2] * math.sin(extreme_ag_value_r)) * (
                                   brachium[2] * math.sin(extreme_ag_value_r)) - brachium[0] * brachium[0] - brachium[1] * \
                       brachium[1]
        angle2_value = angle2_value / (2 * brachium[0] * brachium[1])

        print("jiao2 angle value:")
        print(angle2_value)
        if angle2_value < 1:
            print('extreme_ag_value was:' + str(extreme_ag_value))
            angle2_value = -math.acos(angle2_value)
            print(angle2_value)
            ct21 = angle2_value  # 弧度制
            angle2_value = angle2_value * 180 / 3.1415926
            print("ct2:" + str(angle2_value))
            # print(angle2_value)

            tt = (z_value - brachium[2] * math.sin(extreme_ag_value_r)) * (brachium[0] + brachium[1] * math.cos(ct21)) - \
                 brachium[1] * math.sin(ct21) * (
                         radius_level_value1 - brachium[2] * math.cos(extreme_ag_value_r))
            vv = tt / ((z_value - brachium[2] * math.sin(extreme_ag_value_r)) * (brachium[1] * math.sin(ct21)) + (
                    radius_level_value1 - brachium[2] * math.cos(extreme_ag_value_r)) * (
                               brachium[0] + brachium[1] * math.cos(ct21)))
            angle1_value = vv
            angle1_value = math.atan(angle1_value)
            print("ct1 value radian:" + str(angle1_value))
            if angle1_value < 0:
                extreme_ag_value = sub_self(extreme_ag_value)
                print('after sub angle1 value was:' + str(extreme_ag_value))
            else:
                angle1_value = angle1_value * 180 / 3.1415926
                print("ct1:" + str(angle1_value))
                break


        else:
            extreme_ag_value = add_self(extreme_ag_value)
            print(extreme_ag_value)
            i = i + 1
            print('i value was :' + str(i))
            if i > 360:
                extreme_ag_value = - 70

    # print(angle1_value)
    if ag1 >360:
        ag1 = ag1 - 360
    angle3_value = ag1 - angle1_value - angle2_value
    print("ct3:"+str(angle3_value))

    return(seita1, angle1_value, angle2_value, angle3_value, radius_level_value1, r_polar_axis, z_value,y_value)

def data_dispose():
    print('please input x,y,z value')
    point_x = 0 #float(input())
    point_y = 20 #random.uniform(20.0,28.0) # float(input())
    point_z = 15 #random.uniform(-15.0,24.0)#float(input())
    # radius_level_value1 = point_x * point_x + point_y * point_y  # r1
    # radius_level_value1 = math.sqrt(radius_level_value1)
    print('point_y was:' + str(point_y))
    print('point_z was:' + str(point_z))
    extreme_ag_value = -120
    gather_value =  coordinate_to_angles(point_x, point_y, point_z, extreme_ag_value, brachium)
    return gather_value


duoji_limit = [{"h":630, "l":1960},
        {"h": 1990, "l":670},
        {"h": 650, "l":1980},
        {"h": 770, "l":2100},
        {"h": 630, "l":1960},]

def get_duoji_jiaodu(idx, jiaodu):
    value = (duoji_limit[idx]['h'] - duoji_limit[idx]['l'])/180 * jiaodu
    value =  duoji_limit[idx]['l'] + int(value)
    return value

def init_duoji(pwm):
    for i in range(0, 4):
        value = get_duoji_jiaodu2(i, 90)
        PMW_action(pwm, i, value, 20)


def Test():
    pwm = PCA9685(0x40, debug = False)
    pwm.setPWMFreq(50)
    init_duoji(pwm)

    angle_value = list(data_dispose())
    print(angle_value)
    angle_value[0] = 180 - angle_value[0]
    angle_value[2] = 90 + angle_value[2]
    angle_value[3] = 180 + angle_value[3]
    print(angle_value)

    for idx in range(0, 4):
        print("duoji %d value = " % idx, angle_value[idx])
        targetv = get_duoji_jiaodu(idx, angle_value[idx])
        PMW_action(pwm, idx, targetv, 20)




    idx = 1 
    #PMW_action(pwm, idx, 630, 20)

duoji_limit2 = [{"h":1960, "l":630},
        {"h": 1940, "l":625},
        {"h": 710, "l":2005},
        {"h": 675, "l":2025},]
        #{"h": 710, "l":2100},3HAO]
        #{"h": 730, "l":2060},]

def get_duoji_jiaodu2(idx, jiaodu):
    value = (duoji_limit2[idx]['h'] - duoji_limit2[idx]['l'])/180 * jiaodu
    print('degreee value was:' + str(value))
    value =  duoji_limit2[idx]['l'] + int(value)
    print('degreee value was:' + str(value))
    return value


def Test2():
    #pwm = PCA9685(0x40, debug = False)
   # pwm.setPWMFreq(50)
    targetv_list=[]
    mag_list = []
    #PMW_action(pwm, 5, 1420, 2)

    #idx = 3
    #targetv = get_duoji_jiaodu2(idx, 90)

    #print(targetv)
    #PMW_action(pwm, idx, targetv, 1)
    #init_duoji(pwm)

    angle_value = list(data_dispose())
    print(angle_value)
    angle_value[0] = 180 - angle_value[0]
    angle_value[2] = 90 + angle_value[2]
    angle_value[3] = 90 + angle_value[3]#90 + angle_value[3]
    # print(type(angle_value[1]))
    degree3_value = 180 - abs(angle_value[3] - 90)
    print('角三的角度是：' + str(degree3_value))
    cos_value = math.cos(((degree3_value) / 180) * 3.1415926)
    print('三角的余弦值是：' + str(cos_value))
    above_value = 2 * brachium[1] * brachium[2]
    print('前面的乘积是'+ str(above_value))
    after_value = above_value * cos_value
    print('后半部分的值是：' + str(after_value))
    b_line = brachium[1] * brachium[1] + brachium[2] * brachium[2] - after_value
    b_line = math.sqrt(b_line)
    print('b_line的长度是：' + str(b_line))
    angle_m = (brachium[1] * math.sin(((180 - abs(angle_value[3]-90))/180)*3.1415926))/b_line
    angle_m = math.asin(angle_m)
    angle_m = (angle_m/3.1415926) * 180
    print('m角的角度是：' + str(angle_m))
    angle_e = (brachium[2] * math.sin(((180 - abs(angle_value[3]-90))/180)*3.1415926))/b_line
    angle_e = math.asin(angle_e)
    angle_e = (angle_e / 3.1415926) * 180
    print('e角的角度是：' + str(angle_e))
    angle_q = (180 - abs(angle_value[2] - 90)) - angle_e
    c_line = brachium[0] * brachium[0] + b_line * b_line - 2 * brachium[0] * b_line * math.cos(
        (angle_q/ 180) * 3.1415926)
    c_line = math.sqrt(c_line)
    print('c_line的长度是：' + str(c_line))
    angle_f = (math.sin((((180 - abs(angle_value[2] - 90)) - angle_e)/180)*3.1415926) * brachium[0])/c_line
    angle_f = math.asin(angle_f)
    angle_f = (angle_f / 3.1415926) * 180
    print('f角的角度是：' + str(angle_f))
    angle_n = 540-angle_value[1]-(180 - abs(angle_value[2] - 90))-(180 - abs(angle_value[3]-90))-90-angle_f-angle_m
    print('n角的角度是：' + str(angle_n))
    angle_n = (angle_n/180) * 3.1415926
    z_text_value = c_line * math.cos(angle_n)
    y_text_value = c_line * math.sin(angle_n)
    print('验证的y值是：' + str(y_text_value),'验证的z值是：' + str(z_text_value))

    first_dot_y = brachium[0] * math.sin(float((angle_value[1]/180)*3.1415926))
    first_dot_x = brachium[0] * math.cos(float((angle_value[1] / 180) * 3.1415926))
    print('first_dot_y value was:' + str(first_dot_y))
    print('first_dot_x value was:' + str(first_dot_x))
    second_dot_slog = brachium[0] * brachium[0] + brachium[1] * brachium[1] - 2 * brachium[0] * brachium[1] * math.cos(((180 - abs(angle_value[2]-90))/180)*3.1415926)
    second_dot_slog = math.sqrt(second_dot_slog)
    print('第二个点的轴长:' + str(second_dot_slog))
    second_dot_degree = (brachium[1]*math.sin(((180 - abs(angle_value[2]-90))/180)*3.1415926))/second_dot_slog
    print('angle B value was；')
    print(180 - abs(angle_value[2]-90))
    second_dot_degree = math.asin(second_dot_degree)
    second_dot_degree = (second_dot_degree / 3.1415926) * 180
    second_dot_degree = angle_value[1] - second_dot_degree
    print('第二个点的角度值:' + str(second_dot_degree))
    second_dot_y = second_dot_slog * math.sin(float((second_dot_degree / 180) * 3.1415926))
    second_dot_x = second_dot_slog * math.cos(float((second_dot_degree / 180) * 3.1415926))
    mag_list = [[0,0],[first_dot_x,first_dot_y],[second_dot_x,second_dot_y],[angle_value[4],angle_value[6]],[angle_value[4],0]]
    print('mag_list was:' + str(mag_list))
    print(mag_list[1][1])

    for i in range(len(mag_list)):
        print(i)
        mag_list[i][0] = mag_list[i][0] * 40
        mag_list[i][1] = mag_list[i][1] * 40
    for i in range(len(mag_list)):
        print(i)
        mag_list[i][0] = mag_list[i][0] + 400
        mag_list[i][1] = mag_list[i][1] + 400

    # for i in len(mag_list):
    #     print(mag_list[i][0])
        # mak_list = mag_list[0] * 10
        # mak_list = mag_list[1] * 10
    print(angle_value)
    # # Create a black image
    # import numpy as np
    # import cv2
    # img = np.zeros((512, 512, 3), np.uint8)
    #
    # pts = np.array([[10, 5], [20, 30], [70, 20], [50, 10]], np.int32)
    # pts = pts.reshape((-1, 1, 2))
    # cv2.polylines(img, [pts], True, (0, 255, 255))
    #
    # cv2.imshow('line', img)
    # cv2.waitKey()
    print('*'*100)
    return(mag_list,angle_value)
    # for idx in range(0, 4):
    #     print("duoji %d value = " % idx, angle_value[idx])
    #     targetv = get_duoji_jiaodu2(idx, angle_value[idx])
    #     print(targetv)
    #     targetv_list.append(targetv)
    # print(targetv_list)
    # targetv_list.append(1400)
    # targetv_list.append(1400)
    # print(targetv_list)
    # for idx in range(0,6):
    #     PMW_action(pwm, idx, targetv_list[idx], 20)


# Test2()



